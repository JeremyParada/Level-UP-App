<#
.SYNOPSIS
    Script de deployment automático para Level-UP App
.DESCRIPTION
    Configura local.properties, compila, instala y ejecuta la app en modo debug
.NOTES
    Asegúrate de ejecutar PowerShell como Administrador si tienes problemas con permisos
#>

param(
    [switch]$Clean,
    [switch]$SkipBuild,
    [switch]$Verbose
)

# Colores para output
function Write-ColorOutput($ForegroundColor) {
    $fc = $host.UI.RawUI.ForegroundColor
    $host.UI.RawUI.ForegroundColor = $ForegroundColor
    if ($args) {
        Write-Output $args
    }
    $host.UI.RawUI.ForegroundColor = $fc
}

function Write-Success { Write-ColorOutput Green @args }
function Write-Info { Write-ColorOutput Cyan @args }
function Write-Warning { Write-ColorOutput Yellow @args }
function Write-Error { Write-ColorOutput Red @args }

# Banner
Write-Info "╔═══════════════════════════════════════╗"
Write-Info "║   Level-UP App - Deploy Script       ║"
Write-Info "╚═══════════════════════════════════════╝"
Write-Host ""

# 1. Detectar la ruta del Android SDK
Write-Info "[1/8] Detectando Android SDK..."

$sdkPaths = @(
    "$env:LOCALAPPDATA\Android\Sdk",
    "$env:USERPROFILE\AppData\Local\Android\Sdk",
    "$env:ANDROID_HOME",
    "C:\Android\Sdk"
)

$androidSdk = $null
foreach ($path in $sdkPaths) {
    if (Test-Path $path) {
        $androidSdk = $path
        Write-Success "✓ SDK encontrado en: $androidSdk"
        break
    }
}

if (-not $androidSdk) {
    Write-Error "✗ No se encontró el Android SDK. Por favor instala Android Studio."
    Write-Warning "Rutas buscadas:"
    $sdkPaths | ForEach-Object { Write-Warning "  - $_" }
    exit 1
}

# 2. Configurar local.properties
Write-Info "`n[2/8] Configurando local.properties..."

$localPropertiesPath = "local.properties"
$sdkDirFormatted = $androidSdk -replace '\\', '\\\\'

$localPropertiesContent = @"
## This file is automatically generated by deploy-debug.ps1
# Do not modify this file manually
sdk.dir=$sdkDirFormatted
"@

Set-Content -Path $localPropertiesPath -Value $localPropertiesContent -Encoding UTF8
Write-Success "✓ local.properties configurado correctamente"

# 3. Verificar Gradle Wrapper
Write-Info "`n[3/8] Verificando Gradle Wrapper..."

if (-not (Test-Path "gradlew.bat")) {
    Write-Error "✗ No se encontró gradlew.bat. Regenerando wrapper..."
    gradle wrapper --gradle-version 8.9
}
Write-Success "✓ Gradle Wrapper disponible"

# 4. Compilar el proyecto
if (-not $SkipBuild) {
    Write-Info "`n[4/8] Compilando proyecto..."
    
    # Detener daemon de Gradle para evitar problemas de bloqueo
    Write-Info "Deteniendo Gradle daemon..."
    & .\gradlew.bat --stop | Out-Null
    Start-Sleep -Seconds 2
    
    if ($Clean) {
        Write-Info "Limpiando proyecto..."
        & .\gradlew.bat clean
    }
    
    Write-Info "Compilando APK de debug..."
    $buildOutput = & .\gradlew.bat assembleDebug 2>&1
    
    if ($LASTEXITCODE -ne 0) {
        Write-Error "✗ Error al compilar el proyecto"
        Write-Error $buildOutput
        exit 1
    }
    
    if ($Verbose) {
        Write-Host $buildOutput
    }
    
    Write-Success "✓ Proyecto compilado exitosamente"
} else {
    Write-Warning "[4/8] Compilación omitida (flag -SkipBuild)"
}

# 5. Verificar que existe el APK
Write-Info "`n[5/8] Verificando APK..."

$apkPath = "app\build\outputs\apk\debug\app-debug.apk"

if (-not (Test-Path $apkPath)) {
    Write-Error "✗ No se encontró el APK en: $apkPath"
    exit 1
}

$apkSize = (Get-Item $apkPath).Length / 1MB
Write-Success "✓ APK encontrado (${apkSize:N2} MB)"

# 6. Verificar ADB y dispositivo
Write-Info "`n[6/8] Verificando dispositivo Android..."

$adbPath = "$androidSdk\platform-tools\adb.exe"

if (-not (Test-Path $adbPath)) {
    Write-Error "✗ No se encontró ADB en: $adbPath"
    exit 1
}

# Reiniciar servidor ADB
Write-Info "Reiniciando servidor ADB..."
& $adbPath kill-server | Out-Null
Start-Sleep -Seconds 1
& $adbPath start-server | Out-Null
Start-Sleep -Seconds 2

# Verificar dispositivos conectados
$devices = & $adbPath devices 2>&1 | Select-String -Pattern "device$" | Select-Object -Skip 1

if ($devices.Count -eq 0) {
    Write-Error "✗ No se detectó ningún dispositivo Android conectado"
    Write-Warning "`nAsegúrate de:"
    Write-Warning "  1. Habilitar 'Depuración USB' en el dispositivo"
    Write-Warning "  2. Conectar el dispositivo por USB"
    Write-Warning "  3. Aceptar el diálogo de autorización en el dispositivo"
    Write-Warning "`nPara depuración inalámbrica:"
    Write-Warning "  adb connect <IP>:5555"
    exit 1
}

$deviceId = ($devices[0] -split '\s+')[0]
Write-Success "✓ Dispositivo detectado: $deviceId"

# Obtener información del dispositivo
$deviceModel = & $adbPath -s $deviceId shell getprop ro.product.model
$androidVersion = & $adbPath -s $deviceId shell getprop ro.build.version.release
Write-Info "  Modelo: $deviceModel"
Write-Info "  Android: $androidVersion"

# 7. Instalar APK
Write-Info "`n[7/8] Instalando APK en el dispositivo..."

# Desinstalar versión anterior si existe
Write-Info "Desinstalando versión anterior (si existe)..."
& $adbPath -s $deviceId uninstall com.levelup 2>&1 | Out-Null

# Instalar nueva versión
$installOutput = & $adbPath -s $deviceId install -r $apkPath 2>&1

if ($LASTEXITCODE -ne 0) {
    Write-Error "✗ Error al instalar el APK"
    Write-Error $installOutput
    exit 1
}

Write-Success "✓ APK instalado correctamente"

# 8. Lanzar la aplicación y mostrar logs
Write-Info "`n[8/8] Iniciando aplicación en modo debug..."

# Limpiar logs anteriores
& $adbPath -s $deviceId logcat -c

# Iniciar la aplicación
Write-Info "Lanzando MainActivity..."
$launchOutput = & $adbPath -s $deviceId shell am start -n com.levelup/.MainActivity 2>&1

if ($LASTEXITCODE -ne 0) {
    Write-Error "✗ Error al iniciar la aplicación"
    Write-Error $launchOutput
    exit 1
}

Write-Success "✓ Aplicación iniciada"

# Esperar un momento para que la app inicie
Start-Sleep -Seconds 2

# Mostrar logs en tiempo real
Write-Info "`n═══════════════════════════════════════"
Write-Success "  LOGS EN TIEMPO REAL (Ctrl+C para salir)"
Write-Info "═══════════════════════════════════════`n"

# Filtrar logs solo de la app Level-UP
& $adbPath -s $deviceId logcat -v color "*:I" | Select-String -Pattern "levelup|LevelUp|LEVELUP" -Context 0,2

# Si se interrumpe con Ctrl+C, limpiar
trap {
    Write-Info "`n`nCerrando logs..."
    exit 0
}